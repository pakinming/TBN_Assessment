package pkm.develop.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;

import pkm.develop.model.Account;
import pkm.develop.model.HttpResponse;
import pkm.develop.model.RoleAccount;
import pkm.develop.service.AccountRepo;

@RestController
@RequestMapping("/api")
public class ApiAccountController {

    /**
     * This means to get the bean called ModelRepository
     * Which is auto-generated by Spring, we will use it to handle the data
     */
    @Autowired
    private AccountRepo accountRepo;

    @GetMapping("/account")
    public ResponseEntity<Iterable<Account>> getAllAccount() {
        try {
            return ResponseEntity.ok(accountRepo.findAll());
        } catch (Exception e) {
            System.out.println(e);
            return ResponseEntity.badRequest().build();

        }
    }

    @GetMapping("/account/{userId}")
    public ResponseEntity<Account> getAccountByUserId(@PathVariable("userId") int userId) {
        try {
            return ResponseEntity.ok(accountRepo.findById(userId).get());
        } catch (Exception e) {
            System.out.println(e);
            return ResponseEntity.badRequest().build();
        }
    }

    @PostMapping("/createAccount")
    public ResponseEntity<Account> createAccount(@RequestBody Account account) {
        try {
            account.setRole(RoleAccount.GUEST);

            return ResponseEntity.ok(accountRepo.save(account));
        } catch (Exception e) {
            System.out.println(e);
            return ResponseEntity.badRequest().build();

        }
    }

    @PostMapping("/updateAccount")
    public HttpResponse updateAccount(@RequestBody Account account) {
        try {
            Account resultAccount = accountRepo.findById(account.getUserId()).get();

            resultAccount.setFirstname(account.getFirstname());
            resultAccount.setLastname(account.getLastname());
            resultAccount.setContact(account.getContact());
            // Provide admin only
            resultAccount.setRole(account.getRole());

            accountRepo.save(resultAccount);
            return new HttpResponse(true, "update successfully");

        } catch (Exception e) {
            System.out.println(e);
            return new HttpResponse(false, "update your account failed");
        }
    }
}
